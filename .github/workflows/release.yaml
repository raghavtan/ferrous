name: Build and Package Ferrous

on:
  push:
    branches: [main, master]

permissions: write-all

jobs:
  build:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Step 5: Determine Bump Type
      - name: Determine version bump type
        id: bump-type
        run: |
          echo "Parsing commit message for bump type..."
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $LAST_COMMIT_MESSAGE"

          # Default bump type is patch
          BUMP_TYPE="patch"

          # Determine bump type from commit message keywords
          case "$LAST_COMMIT_MESSAGE" in
            *"major"*|*"release"*)
              BUMP_TYPE="major"
              ;;
            *"minor"*|*"feature"*)
              BUMP_TYPE="minor"
              ;;
            *"patch"*|*"hotfix"*|*"issue"*|*"dependabot"*|*"whitesource"*)
              BUMP_TYPE="patch"
              ;;
          esac

          echo "Determined bump type: $BUMP_TYPE"
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_ENV

      # Step 6: Fetch the latest version
      - name: Fetch latest release version
        id: latest-release
        run: |
          echo "Fetching latest release version..."
          LATEST_VERSION=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest 2>/dev/null | jq -r '.tag_name' || echo "none")
          echo "Latest version: $LATEST_VERSION"

          if [[ "$LATEST_VERSION" == "none" || "$LATEST_VERSION" == "null" ]]; then
            NEW_VERSION="1.0.0"
          else
            MAJOR=$(echo $LATEST_VERSION | awk -F. '{print $1}')
            MINOR=$(echo $LATEST_VERSION | awk -F. '{print $2}')
            PATCH=$(echo $LATEST_VERSION | awk -F. '{print $3}')

            case "${{ env.bump_type }}" in
              major)
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              patch)
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          fi

          echo "Determined new version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV


      - name: Build
        run: make build
        env:
          VERSION: ${{ env.new_version }}

      - name: Package
        run: make package
        env:
          VERSION: ${{ env.new_version }}

      - name: rename
        run: |
          mkdir -p release-assets
          mv dist/ferrous-*.dmg release-assets/ferrous-${{ env.new_version }}.dmg
          mv dist/ferrous-*.pkg release-assets/ferrous-${{ env.new_version }}.pkg


      # Step 10: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        run: |
          RELEASE_RESPONSE=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "'"${{ env.new_version }}"'",
              "target_commitish": "'"${{ github.sha }}"'",
              "name": "'"${{ env.new_version }}"'",
              "body": "Release notes for version '"${{ env.new_version }}"'",
              "draft": false,
              "prerelease": false
            }')
          echo "$RELEASE_RESPONSE" > release.json
          echo "UPLOAD_URL=$(cat release.json | jq -r '.upload_url' | sed 's/{.*}//')" >> $GITHUB_ENV

      # Step 11: Upload assets to GitHub Release
      - name: Upload assets to GitHub Release
        run: |
          for asset in release-assets/*; do
            echo "Uploading $asset..."
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$asset" \
              "${{ env.UPLOAD_URL }}?name=$(basename $asset)"
          done